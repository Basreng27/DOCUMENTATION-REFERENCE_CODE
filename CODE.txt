==========================================================================================
+> Lainnya
    => Timestamp
        date('Y-m-d H:i:s');
    => Date Indo
        date("d F Y", strtotime($item['tanggal_mulai']))
    => JSON Parse
        let data = JSON.parse(response);
    => Last ID
        $this->db->insert_id();
    => $this di Helper
        $CI = get_instance();
    => JS Reload
        window.location.reload();
    => Session
        $this->session->set_userdata('tanggal_kertas_kerja', $due);
        $this->session->userdata('tanggal_kertas_kerja')
    => Select 2
        -> With Class
            $('.select2').select2();
        -> With Name
            $('select[name="id_role"]').select2();
    => Membuat 2 Angka Dibelakang Koma
        number_format($angka, 2);
    => Menghilangkan Tag HTML
        strip_tags();
    => GIT
        -> Get All Branch
            git fetch
            git branch -r
        -> Perubahan .gitignore
            git rm -r --cached .
        -> Delete Brach (LOCAL)
            git branch -D branch_name
        -> Delete Brach (GITLAB)
            git push origin --delete main
        -> fatal: refusing to merge unrelated histories
            git merge --allow-unrelated-histories origin/main
    => Fixed header
        -> V1
            <table class="table table-bordered table-hover text-wrap mt-2 table-responsive sticky" width="100%" border="1" style="position: sticky; height: 50vh;">
            <thead class="bg-cyan text-center align-middle header-table-center" style="position: sticky; top: 0;">
        -> V2
            <table class="table table-striped table-bordered dt-responsive sticky wrap" width="100%" border="1" style="position: sticky; height: 50vh;">
            <thead class="bg-light text-center align-middle header-table-center" style="position: sticky; top: 0;">
    => Value Options JS
        $("#lk option:selected").val();
    => Upload JSON Type (upload Name File)
        if ($filename) {
            $data_file = null;
            if (!empty($id_t_regist) && $id_t_regist != 'null') {
                $data_file = $this->master_model->data('', $this->table_t_regist, ['id' => $id_t_regist])->get()->row_array();
            }

            if ($data_file) {
                $old_file = (array)json_decode($data_file['file_upload']);
                $old_file['file' . (count($old_file) + 1)] = $filename;
                $filename = json_encode($old_file);
            } else {
                $file_json = [
                    'file1' => $filename
                ];

                $filename = json_encode($file_json);
            }
        }
    => JS Object to Array
        Object.values(JSON.parse(data));
    => String Besar Kecil
        ucwords();
    => Load Vendor di index.php
        require_once __DIR__ . '/vendor/autoload.php';
    => Error Report (index.php)
        case 'development':
            error_reporting(-1);
            ini_set('display_errors', 1);
            break;
    => Get "data-id" Di JS
        function user_manual(e){
            var file = e.getAttribute('data-file');
        }
    => Jika $hasil = "6756757.0000 / 10000000.0000"; (Berupa String)
        $result = eval("return ($hasil);");
        $hasil_final = "Operasi matematika tidak valid.";

        if ($result !== false) {
            $hasil_final = $result * 100;
        }
    => Order By Jika Ada 2 Kondisi 
        // urutkan sesuai dengan "c"."adj_besaran_risiko" DESC dan jika ada data kosong di field "c"."adj_besaran_risiko" maka urutkan berdasarkan 	"b"."besaran_risiko" DESC
        ORDER BY
	        COALESCE(CAST("c"."adj_besaran_risiko" AS INT), CAST("b"."besaran_risiko" AS INT)) DESC,
	        "d"."urutan" ASC;
    => Menampilkan Tanggal Tanpa Waktu
        date("Y-m-d", strtotime($validasi['tgl_pengesah']))
    => Icon
        <link rel="shortcut icon" href="<?= asset::image()->src('logo.png'); ?>" />
    => History Search Input (Tambahkan)
        autocomplete="off"
    => Landscape Word Header With Style
        <style>
            @page
            {
                mso-page-border-surround-header: no;
                mso-page-border-surround-footer: no;
            }

            @page Section1
            {
                size:841.9pt 595.3pt;
                mso-page-orientation:landscape;
                margin: 0.7cm 0.7cm 0.7cm 0.7cm;
                mso-header-margin: 42.55pt;
                mso-footer-margin: 49.6pt;
                mso-paper-source: 0;
                layout-grid: 18.0pt;
            }

            div.Section1
            {
                page: Section1;
            }
        </style>

        <div class="Section1"></div>
    => Down/Up Grade Composer
        -> composer 1
            composer self-update --1
        -> composer 2
            composer self-update --2
    => Create UUID
        CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

==========================================================================================
+> Upload
    => V1
        $file_request = $_FILES;
        foreach ($file_request as $key => $value) {
            if (isset($value) && !empty($value['name'][0])) {
                $indikator_id = explode("-", $key);

                $config['upload_path'] = './uploads/kuisioner/rcma';
                $config['allowed_types'] = 'pdf|doc|docx';
                $config['file_name'] = rand_name(50);

                // Create folder uploads if empty
                if (!is_dir($config['upload_path']))
                mkdir($config['upload_path'], 0777, TRUE);

                $this->load->library('upload');
                $this->upload->initialize($config);

                if (!$this->upload->do_upload($key)) {
                $error = array('error' => $this->upload->display_errors());
                } else {
                $data_file = [
                    'id' => rand_name(15),
                    'kd_attach_file' => 'ASSESSMENT-' . $indikator_id[1] . $this->input->post('jadwal') . $insert_id . '-' . $this->session->userdata('user_id'),
                    'nm_attach_file' => $config['file_name'],
                    'modul_attach_file' => $this->class,
                    'tgl_attach_file' => date('Y-m-d H:i:s'),
                    'size_attach_file' => $value['size'],
                    'path_attach_file' => $value['full_path'],
                    'user_id' => $this->session->userdata('user_id') ?? null,
                ];

                $this->db->insert($this->table_t_attachfile, $data_file);
                }
            }
        }

    => V2
        $file_request = $_FILES;
        if ($file_request) {
            foreach ($file_request as $key => $value) {
                if (isset($value) && !empty($value['name'])) {
                    $config['upload_path'] = './uploads/setting';
                    $config['allowed_types'] = 'png|jpeg|jpg';
                    $config['file_name'] = rand_name(50);

                    $file_extension = pathinfo($value['name'], PATHINFO_EXTENSION);

                    // Create folder uploads if empty
                    if (!is_dir($config['upload_path']))
                        mkdir($config['upload_path'], 0777, TRUE);

                    $this->load->library('upload');
                    $this->upload->initialize($config);

                    if (!$this->upload->do_upload($key)) {
                        $error = array('error' => $this->upload->display_errors());
                    } else {
                        $old_file_name = $this->db->get_where($this->table_setting, ['name' => $key])->row()->value;
                        if (!empty($old_file_name) && file_exists('./uploads/setting/' . $old_file_name)) {
                            unlink('./uploads/setting/' . $old_file_name);
                        }

                        $this->db->update($this->table_setting, ['value' => $config['file_name'] . '.' . $file_extension], ['name' => $key]);
                    }
                }
            }
        }
    =>  Get Extension
        $name = $_FILES["file"]["name"];
        $ext = end((explode(".", $name)));
    => V3 Single File
        if (!empty($_FILES['file'])) {
            $filename = rand_name(16);
            // $this->lang->load('upload', 'indonesian');

            $config['upload_path']   = './uploads/kertas_kerja/';
            $config['allowed_types'] = '*';
            $config['max_size'] = '5120';
            $config['file_name'] = $filename;
            $config['overwrite'] = true;

            if (!is_dir($config['upload_path']))
                mkdir($config['upload_path'], 0777, TRUE);

            $this->load->library('upload', $config);
            $this->upload->initialize($config);

            $file = !empty($_FILES['file']['name']) ? $_FILES['file']['name'] : '';
            $extention = $this->upload->get_extension($file);

            if (!$this->upload->do_upload('file')) {
                $message = array(false, 'title' => 'Peringatan!', 'msg'   => $this->upload->display_errors('', ''), 'url'   => '');
            }

            $this->db->update($this->table_t_kertas_kerja, ['file' => $filename . $extention], ['id' => $id, 'bulan' => date_convert($tgl_kk[0]), 'tahun' => $tgl_kk[1],]);
        }

==========================================================================================
+> Query
    => IF Dalam Query
        CASE		
            WHEN B.besaran_risiko IS NULL THEN
            1 ELSE 0 
        END
    => Mengelompokan 
        SELECT DISTINCT ON ( A.indikator_id ) A.indikator_id,
    => delete
        $this->db->query("DELETE FROM " . $this->table_t_pic_mitigasi_risiko . " WHERE id_t_mitigasi = " . $id);
    => Add Auto Increment PostgreSql
        CREATE SEQUENCE rcrmma_t_jadwal_id START 15;
        ALTER TABLE "public"."rcrmma_t_jadwal" 
        ALTER COLUMN "id" SET DEFAULT nextval('rcrmma_t_jadwal_id'::regclass);
    => Contoh Query Untuk Mencari Data Double Digabung Jadi 1
        -> V1
            public function get_builder_data($limit = null, $offset = null)
            {
                $this->db->select("a.id AS id_auditable, a.tgl_mulaiaudit, a.periodedata_mulai, a.periodedata_selesai,
                                    COALESCE(MAX(CASE WHEN e.kd_posisitugas = 'KTM' THEN d.nama END), '') AS ketua_tim,
                                    COALESCE(MAX(CASE WHEN e.kd_posisitugas != 'KTM' THEN d.nama END), '') AS anggota,
                                    b.nama_unit_kerja")
                ->from($this->table_t_auditable . ' a')
                ->join($this->table_m_unit_kerja . ' b', 'b.id = a.auditee', 'left')
                ->join($this->table_t_penugasan_audit . ' c', 'a.id = c.id_auditable', 'LEFT')
                ->join($this->table_user . ' d', 'c.id_user = d.id_user', 'LEFT')
                ->join($this->table_m_posisi_penugasan . ' e', 'c.id_penugasan = e.id', 'LEFT')
                ->where('a.status_close_meeting', 'FINAL')
                ->order_by('a.tahun ASC, a.tgl_mulaiaudit ASC');
                $this->db->limit($limit, $offset);
                $this->db->group_by("a.id, a.tgl_mulaiaudit, a.periodedata_mulai, a.periodedata_selesai, b.nama_unit_kerja");

                return $this->db->get();
            }
        -> V2
            public function get_builder_data($limit = null, $offset = null)
            {
                $this->db->select("	a.tahun, a.id AS id_auditable_a, a.tgl_mulaiaudit, a.tgl_selesaiaudit, a.periodedata_mulai, a.periodedata_selesai, a.no_surat_lha,
                                    b.nama_jenis_audit, 
                                    d.nama AS nama_kelas,
                                    c.nama_unit_kerja,
                                    m.metode_audit,
                                    n.id AS id_pelengkap, n.*,
                                    MAX ( i.tanggal_review ) AS review_apm_cao,
                                    MAX ( j.tanggal_review ) AS review_lha_cao,
                                    h.tgl_rapatpembuka, h.tgl_rapatpenutup, h.tgl_laporan_mulai, h.tgl_laporan_selesai,
                                    string_agg(DISTINCT CAST (f.nama AS TEXT), ', '	) AS nama_auditor,
                                    string_agg(DISTINCT CAST (l.nama_objek AS TEXT), ', '	) AS objek_pemeriksaan,
                                    COALESCE(MAX(CASE WHEN g.kd_posisitugas = 'KTM' THEN f.nama END), '') AS ketua_tim,
                                    COALESCE(MAX(CASE WHEN g.kd_posisitugas != 'KTM' THEN f.nama END), '') AS anggota,
                                    (SELECT json_agg(json_build_object(sub_e.id_kk, CASE WHEN t.id_kk IS NOT NULL THEN true ELSE false END))
                                        FROM (
                                            SELECT DISTINCT ON (e.id_kk) e.id_kk
                                            FROM rba_t_kertaskerja e
                                            WHERE a.id = e.id_auditable
                                            ) sub_e
                                        LEFT JOIN (
                                            SELECT DISTINCT ON (id_kk) id_kk
                                            FROM rba_t_tanggapan_audit
                                        ) t ON sub_e.id_kk = t.id_kk
                                    ) AS observasi,
                                    (SELECT json_agg(json_build_object(sub_e.id_kk, sub_e.status_tindaklanjut))
                                        FROM (
                                            SELECT DISTINCT ON (e.id_kk) e.id_kk, e.status_tindaklanjut
                                            FROM rba_t_kertaskerja e
                                            WHERE a.id = e.id_auditable
                                        ) sub_e
                                    LEFT JOIN (
                                            SELECT DISTINCT ON (id_kk) id_kk
                                            FROM rba_t_tanggapan_audit
                                        ) u ON sub_e.id_kk = u.id_kk
                                    ) AS tindak_lanjut,
                                    (SELECT json_agg(json_build_object(sub_e.id, n.id))
                                        FROM (
                                            SELECT DISTINCT ON (e.id) e.id
                                            FROM corfi e
                                            WHERE n.id = e.id_pelengkap
                                        ) sub_e
                                    ) AS corfi,
                                    (SELECT json_agg(json_build_object(sub_e.id, null))
                                        FROM (
                                            SELECT DISTINCT ON (e.id) e.id
                                            FROM waktu_extend e
                                            WHERE a.id = e.id_auditable
                                        ) sub_e
                                    ) AS extend")
                    ->from('rba_t_rkat_auditable a')
                    ->join('rba_m_jenis_audit b', 'a.jenis_audit = b.id', 'LEFT')
                    ->join('m_unit_kerja c', 'a.auditee = c.id', 'LEFT')
                    ->join('m_kelas_cabang d', 'c.kelas_id = d.id', 'LEFT')
                    ->join('rba_t_penugasan_audit e', 'a.id = e.id_auditable', 'LEFT')
                    ->join('user f', 'e.id_user = f.id_user', 'LEFT')
                    ->join('rba_m_posisi_penugasan g', 'e.id_penugasan = g.id', 'LEFT')
                    ->join('rba_auditplan_memorandum h', 'a.id = h.id_auditable', 'LEFT')
                    ->join('rba_h_historical_apm i', 'a.id = i.id_auditable', 'LEFT')
                    ->join('rba_h_historical_lha j', 'a.id = j.id_auditable', 'LEFT')
                    ->join('rba_t_objek k', 'a.id = k.id_auditable', 'LEFT')
                    ->join('rba_m_objek l', 'k.id_objek = l.id', 'LEFT')
                    ->join('m_metode_audit m', 'm.id = a.metode_audit', 'LEFT')
                    ->join('pelengkap_all_lha n', 'n.id_auditable = a.id', 'LEFT')
                    ->join('corfi o', 'o.id_pelengkap = n.id', 'LEFT')
                    ->join('waktu_extend p', 'p.id_auditable = a.id', 'LEFT');

                $this->db->where('a.status_close_meeting', 'FINAL');
                $this->db->where('EXISTS (SELECT 1 FROM rba_h_historical_apm x WHERE a.id = x.id_auditable AND LOWER(x.status_review) = \'setuju\' LIMIT 1)');
                $this->db->where('EXISTS (SELECT 1 FROM rba_h_historical_lha y WHERE a.id = y.id_auditable AND LOWER(y.status_review) = \'setuju\' LIMIT 1)');

                $this->db->group_by('a.tahun, a.id, a.tgl_mulaiaudit, a.tgl_selesaiaudit, a.periodedata_mulai, a.periodedata_selesai, a.no_surat_lha,
                                    b.nama_jenis_audit, 
                                    d.nama,
                                    h.tgl_rapatpembuka, h.tgl_rapatpenutup, h.tgl_laporan_mulai, h.tgl_laporan_selesai,
                                    c.nama_unit_kerja,
                                    m.metode_audit,
                                    n.id');

                if ($limit) $this->db->limit($limit, $offset);
                if ($this->nama_pemeriksaan) $this->db->like('LOWER(c.nama_unit_kerja)', strtolower($this->nama_pemeriksaan), 'BOTH');
                if ($this->kelas) $this->db->where('d.id', $this->kelas);
                if ($this->tahun) $this->db->where('a.tahun', $this->tahun);
                if ($this->ketua_tim) $this->db->like('LOWER(f.nama)', strtolower($this->ketua_tim), 'BOTH');
                if ($this->no_lha) $this->db->like('LOWER(a.no_surat_lha)', strtolower($this->no_lha), 'BOTH');
                if ($this->objek) $this->db->where('l.id', $this->objek);

                $this->db->order_by('a.id', 'asc');
            }
    => Squence Auto Increment Pada Field
        nextval('ai_tigapilar'::regclass)
    => Text Menjadi MD5
        SELECT MD5('password')
    => Drop Schema
        DROP SCHEMA qwe CASCADE
    => GET Tanggal Atau Bulan
        SELECT
            *
        FROM
            rcrmma_t_jadwal
        WHERE
            DATE_PART('day', tanggal_mulai) = 7
            AND DATE_PART('month', tanggal_mulai) = 6
        ORDER BY
            tanggal_mulai DESC;
    => Alter Tabler Reference
        ADD COLUMN created_by INT REFERENCES flpp_user(user_id) ON DELETE CASCADE ON UPDATE CASCADE;
    => Merubah Type Data
        CAST(b.indikator_id AS int)
    => Mengganti Type Data
        ALTER TABLE risk_data_posisi ALTER COLUMN ce_dp_indikator_name TYPE VARCHAR(255);
==========================================================================================
+> Transact
    // Memulai transaksi
    $this->db->trans_begin();

    // Langkah 1: Insert pertama
    $data1 = [
        'field1' => 'Nilai 1',
        'field2' => 'Nilai 2',
    ];
    $this->db->insert('tabel1', $data1);

    // Langkah 2: Insert kedua
    $data2 = [
        'field1' => 'Nilai 3',
        'field2' => 'Nilai 4',
    ];
    $this->db->insert('tabel2', $data2);

    // Periksa status transaksi
    if ($this->db->trans_status() === FALSE) {
        // Transaksi gagal, rollback
        $this->db->trans_rollback();
        echo 'Transaksi gagal';
    } else {
        // Transaksi berhasil, commit
        $this->db->trans_commit();
        echo 'Transaksi berhasil';
    }

==========================================================================================
+> Post Onclick JS
    => POST V1
        $(".risiko").on('change', function() {
            let lvl_dampak = $("#lvl_dampak option:selected").val();
            let lvl_kemungkinan = $("#lvl_kemungkinan option:selected").val();

            $.post("url_tujuan.php", {
                key1: "nilai1",
                key2: "nilai2"
            }, function(data) {

            var data = JSON.parse(res);
                var besaran_risiko = $("#besaran_risiko");

                besaran_risiko.val(data.nilai);
            });
        });
    => Controller
        echo json_encode($result); = Return Controller
    => POST V2
        $("#notif").on('click', function() {
            e.preventDefault();

            let id = $(this).data('id');

            $.post("<?= base_url(); ?>/rp/delete_notif", {
                id: id,
                csrf_tapera_flpp_token: generateCSRF()
            }, function(data) {});
        });
    => POST V3
        $(document).ready(function() {
            $(".notif").on('click', function(e) {
                let id = $(this).data('id');

                $.post("<?= base_url(); ?>rp/delete_notif", {
                    id: id,
                    csrf_tapera_flpp_token: generateCSRF()
                }, function(data) {
                    // Handle the response if needed
                    console.log(data);
                }).fail(function(xhr, status, error) {
                    console.error("AJAX request failed:", status, error);
                });
            });
        });
    => POST V4 Notif V1
        $('#evaluasi_form').submit(function(event) {
            event.preventDefault();

            tinyMCE.triggerSave();

            $('#submit').val('Saving..');
            $('#submit').attr('disabled', 'disabled');

            var formData = new FormData(this);

            $.ajax({
                url: '<?= $form_action; ?>',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(data) {
                    res_data = data.split("-");

                    $("#dialog:ui-dialog").dialog("destroy");
                    $('.ui-dialog-title').html(res_data[1]);
                    $('#dialog-message').removeAttr('title');
                    $('#dialog-message').attr('title', res_data[1]);
                    $('#dialog-message').html(res_data[2]);

                    $("#dialog-message").dialog({
                        modal: true,
                        buttons: {
                            Ok: function() {
                                if (res_data[0] != 'ok') {
                                    window.location.href = "<?= base_url() . 'icaap_srep'; ?>";
                                } else {
                                    if (res_data[3] != '') {
                                        window.opener.load_child(res_data[3]);
                                        window.close();
                                    } else {
                                        window.location.href = "<?= base_url() . 'icaap_srep'; ?>";
                                    }
                                }
                            }
                        }
                    });

                    $('#submit').val('Save');
                    $('#submit').removeAttr("disabled");
                }
            });

            return false;
        });
    => POST Notif V2
        -> HTML
            <form id="setting_form" name="setting_form" action="<?= $url_save; ?>" method="post">
                <button type="submit" class="btn btn-primary btn-sm float-right" id="save_setting_form" onclick="save_data_setting('#setting_form')" value="Save"><i class="fas fa-save"></i> Simpan</button>
            </form>

            <script>
                function save_data_setting(form, callback, text = "Apakah data ini akan disimpan") {
                    var formData = $(form).serialize();

                    event.preventDefault();

                    Swal.fire({
                        title: 'Konfirmasi ?',
                        text: text,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Ya',
                        cancelButtonText: 'Batal',
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $.ajax({
                                type: "POST",
                                url: $(form).attr('action'),
                                data: formData,
                                dataType: "json",
                                beforeSend: function() {
                                    $('#loadingWraper').fadeIn();
                                    $.LoadingOverlay("show");
                                },
                                success: function(data) {
                                    Swal.fire('Info', data.msg, 'info').then(function(e) {
                                        if (typeof callback === "function") {
                                            callback();
                                        } else {
                                            if (typeof data.url != 'undefined') {
                                                window.location.href = data.url;
                                            }
                                        }
                                    })
                                },
                                error: function(xhr, status, error) {
                                    var response = xhr.responseJSON;
                                    Swal.fire('error', response.msg, 'error')
                                },
                                complete: function() {
                                    $('#loadingWraper').fadeOut();
                                    $.LoadingOverlay("hide");
                                }
                            });
                        }
                    })

                    return false;
                }
            </script>
        -> Controller
            function index()
            {
                $result['title'] = "Log Activity";
                $result['data'] = $this->data();
                $result['url_save'] = base_url('setting/simpan');

                $this->load_template('template_new', $this->class . '/display', $result);
            }

            public function data()
            {
                $data['data'] = $this->setting_model->get_data();

                return $data;
            }

            public function simpan()
            {
                $setting = $this->input->post('setting');

                foreach ($setting as $key => $value) {
                    $this->db->update($this->table_b_configurations, ['value' => $value], ['title' => $key]);
                }

                $message = array(TRUE, 'title' => 'Informasi', 'msg'   => 'Proses update data berhasil.!', 'url'   => site_url('setting'));

                echo json_encode($message);
            }

==========================================================================================
+> Chart JS
    => View nya
        <div class="col-md-6">
            <div>
                <canvas id="laporan-flpp"></canvas>
            </div>
        </div>

        <!-- <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> -->
        <script src="<?= site_url('asset\js\chart.js') ?>"></script>

        <script>
            const lapFlpp = document.getElementById('laporan-flpp');

            $(document).ready(function() {
                generateChart(lapFlpp, <?= $data_level_risiko['label']; ?>, <?= $data_level_risiko['data']; ?>);
            });

            function generateChart(elemetId, labels, data) {
                new Chart(lapFlpp, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: '# of Votes',
                            data: data,
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }
        </script>
    => Controllernya
        $data_level_risiko = $this->master_level_kemungkinan_model->get_data();
        $label = [];
        $data = [];
        foreach ($data_level_risiko as $key => $value) {
            $label[$value['level']] = $value['nama'];
            $data[$value['level']] = $value['level'];
        }
        $data['data_level_risiko'] = [
            'label' => json_encode(array_values($label)),
            'data' => json_encode(array_values($data))
        ];
    => Controller V2 Get Bulan
        $get_kk = $this->common_model->data('', $this->table_t_kertas_kerja, ['bulan' => 10, 'tahun' => 2022])->get()->result_array();

        $monthsData = month();
        $countedData = [];

        foreach ($get_kk as $value) {
            $bulan = $value['bulan'];

            if (array_key_exists($bulan, $monthsData)) {
                // Jika ada, tambahkan ke array countedData dengan inisialisasi 0
                if (!isset($countedData[$bulan])) {
                    $countedData[$bulan] = 0;
                }
                $countedData[$bulan]++;
            }
        }

        // Isi yang awalnya 0
        foreach ($monthsData as $key => $monthName) {
            if (!isset($countedData[$key])) {
                $countedData[$key] = 0;
            }
        }

        // Urutkan array berdasarkan kunci (key)
        ksort($countedData);
        $data['data'] = json_encode(array_values($countedData));

==========================================================================================
+> Helper
    => Month Convert
        if (!function_exists('month_convert')) {
            function month_convert($month)
            {
                switch (strtolower($month)) {
                    case "jan":
                        return 1;
                    case "feb":
                        return 2;
                    case "mar":
                        return 3;
                    case "apr":
                        return 4;
                    case "may":
                        return 5;
                    case "jun":
                        return 6;
                    case "jul":
                        return 7;
                    case "aug":
                        return 8;
                    case "sep":
                        return 9;
                    case "oct":
                        return 10;
                    case "nov":
                        return 11;
                    case "dec":
                        return 12;
                    default:
                        return "Bulan tidak valid";
                }
            }
        }
    => Month V2
        if (!function_exists('month')) {
            function month()
            {
                return [
                    1 => 'Januari',
                    2 => 'Februari',
                    3 => 'Maret',
                    4 => 'April',
                    5 => 'Mei',
                    6 => 'Juni',
                    7 => 'Juli',
                    8 => 'Agustus',
                    9 => 'September',
                    10 => 'Oktober',
                    11 => 'November',
                    12 => 'Desember',
                ];
            }
        }
    => Rand Name
        if (!function_exists('rand_name')) {
            function rand_name($length)
            {
                $randomString = '';
                $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';

                for ($i = 0; $i < $length; $i++) {
                    $randomIndex = mt_rand(0, strlen($characters) - 1);
                    $randomCharacter = $characters[$randomIndex];
                    $randomString .= $randomCharacter;
                }

                return time() . '_' . $randomString;
            }
        }
    => CSRF
        if (!function_exists('csrf')) {
            function csrf()
            {
                $CI = &get_instance();

                return form_hidden($CI->security->get_csrf_token_name(), $CI->security->get_csrf_hash());
            }
        }
    => Insert Activity Log
        if (!function_exists('inster_activity_log')) {
            function inster_activity_log($table = null, $act = null)
            {
                $CI = get_instance();

                $data = array(
                    'user_id' => $CI->session->userdata('user_id'),
                    'activity' => $act,
                    'waktu' => date('Y-m-d H:i:s'),
                    'table_affected' => $table,
                    'ip_address' => $CI->input->ip_address(),
                    'browser' => $CI->agent->agent_string(),
                    'nama_user' => $CI->session->userdata('username'),
                );

                $CI->db->insert('rpc_activity_log', $data);
            }
        }
    => Print PDF
        // composer require mpdf/mpdf
        if (!function_exists('print_mpdf')) {
            function print_mpdf($html, $data = [], $tag = null, $options = [])
            {
                $CI = get_instance();

                $CI->load->helper('mpdf');

                $mpdf = new \Mpdf\Mpdf();
                // Fungsi untuk mendapatkan footer
                $footer = '<table width="100%" style="border-top: 1px solid #000000; font-size: 10px; padding-top: 3mm;">
                                <tr>
                                    <td style="text-align: left;">Print By Application Profil Risiko FLPP - ' . date('Y-m-d H:i:s') . ' </td>
                                    <td style="text-align: center;"></td>
                                    <td style="text-align: right;">{PAGENO}/{nbpg}</td>
                                </tr>
                            </table>';

                // Atur header dan footer untuk semua halaman
                $mpdf->SetHTMLFooter($footer);

                // Isi dokumen PDF
                if ($tag == "template") {
                    $html = $CI->load->view($html, $data, true);
                }

                if (isset($options['orientasi']))
                    $mpdf->AddPage($options['orientasi']);

                // Proses PDF
                $mpdf->WriteHTML($html);

                // Tampilkan PDF dalam browser
                $mpdf->Output();
            }
        }
    => Notif
        if (!function_exists('insert_notif')) {
            function insert_notif($sender = null, $receiver = null, $message = null, $url = null)
            {
                $CI = get_instance();

                $data = array(
                    'sender' => $sender,
                    'receiver' => $receiver,
                    'message' => $message,
                    'url' => $url,
                    'tanggal' => date('Y-m-d H:i:s')
                );

                $CI->db->insert('rpc_activity_log', $data);
            }
        }

==========================================================================================
+> Master
    => GET Data Master
        public function data($select = '*', $table = null, $where = [], $like = [], $group_by = null, $order_by = [], $limit = null, $offset = null, $or_like = null)
        {
            $this->db->select($select);
            $this->db->from($table);

            if (is_array($where)) {
                foreach ($where as $column => $value) {
                    $this->db->where($column, $value);
                }
            }

            if (is_array($like)) {
                foreach ($like as $column => $value) {
                    $this->db->like('LOWER(' . $column . ')', $value, 'BOTH');
                }
            }

            if (is_array($or_like)) {
                foreach ($or_like as $column => $value) {
                    $this->db->or_like('LOWER(' . $column . ')', $value, 'BOTH');
                }
            }

            if ($group_by)
                $this->db->group_by($group_by);

            if (is_array($order_by)) {
                foreach ($order_by as $column => $direction) {
                    $this->db->order_by($column, $direction);
                }
            }

            if ($limit)
                $this->db->limit($limit, $offset);

            return $this->db;
        }
    => GET Options
            public function options($select = '*', $table = null, $where = [], $id = null, $nama = null)
            {
                $this->db->select($select);
                $this->db->from($table);
                if (is_array($where)) {
                    foreach ($where as $column => $value) {
                        $this->db->where($column, $value);
                    }
                }

                $query = $this->db->get()->result_array();

                foreach ($query as $key => $value) {
                    $result[$value[$id]] = $value[$nama];
                }

                return $result;
            }

==========================================================================================
+> HTML
    => Lonceng
        <li class="nav-item dropdown">
            <a class="nav-link d-flex align-items-center pr-0" data-toggle="dropdown" href="#">
                <i class="fas fa-bell fa-lg"></i>
                <span class="badge badge-secondary rounded-circle mb-3" style="padding: 3.5px 5.5px;">5</span>
            </a>

            <div class="dropdown-menu dropdown-menu-sm dropdown-menu-right">
                <?php for ($i = 1; $i <= 5; $i++) { ?>
                        <a href="#" class="dropdown-item small">
                            Notifkasi
                        </a>
                <?php } ?>
            </div>
        </li>

==========================================================================================
+> JS
    => Function Generate CSRF (Simpan Di Template)
        function generateCSRF() {
            return '<?= $this->security->get_csrf_hash(); ?>'
        }
        -> Di JS nya Ditambahkan parameter "csrfToken" dan di data di tambahkan ini.
            - data = $(form).serialize() + '&csrf_rcma_bank_bali_token=' + csrfToken;
            - csrf_tapera_flpp_token: generateCSRF()
            - data += '&csrf_tapera_flpp_token=' + csrfToken;
    => Split
        -> Split
            let tgl = $("#posisi").val(); // oct-2017
            let splitTgl = tgl.split('-');

        -> append data
            $("#tahun").html('TAHUN ' + splitTgl[1]);
            $("#tanggal_bulan").val($("#posisi").val());
    => Tambah Field
        -> HTML
            <button type="button" class="btn btn-primary" id="tambah">Tambah</button>

            <div class="row col-lg-12" id="OROK"></div>
        -> JS
            $("#tambah").on('click', function() {
                $('#OROK').append(`
                    <div class="row mt-3 col-lg-12">
                        <div class="col-lg-2"><label> Opsi : </label></div>
                        <div class="col-lg-10">
                            <?= form_dropdown('id_opsi', $options_opsi, '', 'class="form-control"'); ?>
                        </div>
                    </div>

                    <div class="row mt-3 col-lg-12">
                        <div class="col-lg-2"><label> Rencana Aksi : </label></div>
                        <div class="col-lg-10">
                            <?= form_dropdown('id_rencana_aksi', $options_rencana_aksi, '', 'class="form-control"'); ?>
                        </div>
                    </div>

                    <div class="row mt-3 col-lg-12">
                        <div class="col-lg-2"><label> Output : </label></div>
                        <div class="col-lg-10">
                            <?= form_dropdown('id_output', $options_output, '', 'class="form-control"'); ?>
                        </div>
                    </div>

                    <div class="row mt-3 col-lg-12">
                        <div class="col-lg-2"><label> Kendala : </label></div>
                        <div class="col-lg-10">
                            <?= form_dropdown('id_kendala', $options_kendala, '', 'class="form-control"'); ?>
                        </div>
                    </div>
                `);
            });
    => Remove
        -> HTML
             <td><a class="btn btn-danger float-right" onclick="delet(<?= $value['id'] ?>)">Hapus</a></td>
        -> JS
            $('#ROK').on('click', '.remove-section', function() {
                $(this).closest('.appended-section').remove();
            });
    => Koma 3 Angka
        -> HTML
            <?php foreach ($data as $key => $value) : ?>
                <tr>
                    <td><?= $key + 1; ?></td>
                    <td><?= $value['nama']; ?></td>
                    <td><input type="text" class="form-control nilai-input" name="nilai[<?= $value['id_data_kuantitatif']; ?>][nilai_iru]" value="<?= @$value['nilai_iru']; ?>" data-id="<?= $value['id_data_kuantitatif']; ?>"></td>
                    <input type="hidden" class="form-control" name="nilai[<?= $value['id_data_kuantitatif']; ?>][id_input_data]" value="<?= @$value['id']; ?>">
                </tr>
            <?php endforeach ?>
        -> JS
            $(document).ready(function() {
                // Number formatting function
                Number.prototype.format = function(options) {
                    options = options || {};
                    var thousandsSeparator = options.thousandsSeparator || ".";

                    var parts = this.toString().split(".");
                    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, thousandsSeparator);

                    return parts.join(".");
                };

                // Format the number with thousands separator
                $(".nilai-input").each(function() {
                    var nilai = $(this).val();
                    var formattedNilai = parseFloat(nilai.replace(/\./g, '')).format({
                        thousandsSeparator: "."
                    });
                    $(this).val(formattedNilai);
                });
            });
    => Show Hide OnChange
        -> HTML
            <div class="form-group col-sm-12">
                <label> Tindak Lanjut :</label>
                <?= form_dropdown('st_tindaklanjut', $opt_tindaklanjut, !empty($data->st_tindaklanjut) ? $data->st_tindaklanjut : '', 'class="form-control select2" id="st_tindaklanjut" onchange="load_tindaklanjut(this.value)"'); ?>
            </div>
             <div class="form-group col-sm-3 upload">
            <label>Upload :</label>
            <div class="col-sm-9">
              <input type="file" name="file">
            </div>
          </div>
        -> JS
            $('#st_tindaklanjut').on('change', function() {
                var st = $('#st_tindaklanjut').val()

                if (st == 3) {
                $('.upload').show()
                } else(
                $('.upload').hide()
                )
            })
    => Convert Date
        function convertDate(dateF = null) {
            const months = [
                "Januari",
                "Februari",
                "Maret",
                "April",
                "Mei",
                "Juni",
                "Juli",
                "Agustus",
                "September",
                "Oktober",
                "November",
                "Desember",
            ];

            var date = new Date(dateF);
            var result = "";

            var day = date.getDate();
            var monthIndex = date.getMonth();
            var year = date.getFullYear();

            if (dateF == null) {
                result = " - ";
            } else {
                result = date = day + " " + months[monthIndex] + " " + year;
            }

            return result;
        }

        function getYear(dateF = null) {
            let date = new Date(dateF);
            let year = date.getFullYear();

            return year;
        }

        function getMonth(dateF = null) {
            const months = [
                "Januari",
                "Februari",
                "Maret",
                "April",
                "Mei",
                "Juni",
                "Juli",
                "Agustus",
                "September",
                "Oktober",
                "November",
                "Desember",
            ];

            let date = new Date(dateF);
            let month = date.getMonth();

            return months[month];
        }
    => forEach
        -> V1
            tamp_penerima.forEach(element => {
                if (element) {
                    penerima += element.trim() + ', '
                }
            });
        -> V2
            Object.entries(dt).forEach(([key, el]) => {
                dropdown += `<option value="${el.id}">${el.nama_unit_kerja}</option>`;
            });
    => Contoh preventDefault
        $(document).ready(function() {
            $('.delete-file').on('click', function(e) {
                e.preventDefault();

                if (confirm('Apakah Anda yakin ingin menghapus file?')) {
                    window.location.reload();
                }
            });
        });
    => Delete Tidak Refresh Halaman
        -> JS
            $('a.delete-param').click(function(){
                var titlenya = $(this).attr("title");
                var urlDelete = $(this).attr('href');
            
                confirmDialog(titlenya, function(){
                $('#loadingWraper').fadeIn();
            
                $.post(urlDelete, {}, function(data){
                    $('#loadingWraper').fadeOut();
            
                    if(data[0] == true){
                    if(data.status=='remove'){
                        $(data.remove).remove();

                        // window.location.reload();
                    }else  if(data.status == 'reload'){
                        window.location.reload();
                    }
                    }else{
                    alertDialog(data.msg);

                    if(typeof(data.status) != "undefined" && data.status == 'reload'){
                        window.location.reload();
                    }
                    }
                }, 'json');
                });
                
                return false;
            });
        -> HTML
            <a class="ui-icon ui-icon-trash delete-param" href="<?= site_url('parameter/delete/' . $r_param->parameter_id); ?>"></a>

==========================================================================================
+> Export Excel
    => Install
        composer require phpoffice/phpspreadsheet
    => Use
        use PhpOffice\PhpSpreadsheet\Spreadsheet;
        use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
    => HTML
        <a class="btn btn-success" href="<?= $xls_url ?>" target="_blank">
            <i class="far fa-file-excel" style="font-size:17px;color:white;"></i>
        </a>
    => Contoh Code
        public function export_excell()
        {
            ini_set('max_execution_time', 36000000000000);
            ini_set('memory_limit', '-1');

            $this->filters_session();

            $data['result']	= $this->training_karyawan_model->get_data('', '')->result();
            $data['header']	= 'Data Training Karyawan';
            $data['filename']	= 'data_training_karyawan';
            // Create new Spreadsheet object
            $spreadsheet = new Spreadsheet();

            // Add some data
            $spreadsheet->getActiveSheet()->mergeCells('A1:C1');
            $spreadsheet->setActiveSheetIndex(0)
                ->setCellValue('A1', $data['header']);

            $spreadsheet->setActiveSheetIndex(0)
                ->setCellValue('A3', 'NO')
                ->setCellValue('B3', 'NPK')
                ->setCellValue('C3', 'NAMA')
                ->setCellValue('D3', 'CABANG SPU')
                ->setCellValue('E3', 'DEPARTEMENT')
                ->setCellValue('F3', 'JABATAN')
                ->setCellValue('G3', 'KODE JABATAN')
                ->setCellValue('H3', 'TANGGAL TRAINING')
                ->setCellValue('I3', 'PENYELENGGARA')
                ->setCellValue('J3', 'TEMA TRAINING')
                ->setCellValue('K3', 'LOKASI TRAINING')
                ->setCellValue('L3', 'BIAYA TRAINING');

            // Mengatur Posisi panjang lebar
            $columnWidths = [
                'A' => 5,
                'B' => 10,
                'C' => 40,
                'D' => 25,
                'E' => 60,
                'F' => 45,
                'G' => 30,
                'H' => 25,
                'I' => 15,
                'J' => 15,
                'K' => 15,
                'L' => 15,
            ];

            foreach ($columnWidths as $column => $width) {
                $spreadsheet->getActiveSheet()->getColumnDimension($column)->setWidth($width);
            }

            // Mengatur rata tengah untuk sel 
            $columns = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'];
            $row = 3;

            foreach ($columns as $column) {
                $cell = $column . $row;
                $spreadsheet->getActiveSheet()->getStyle($cell)->getAlignment()->setHorizontal(\PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_CENTER);
            }

            // Warna Field
            $spreadsheet->getActiveSheet()->getStyle('A3:L3')->getFill()->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)->getStartColor()->setRGB('F5F10D');

            $i = 4;
            foreach ($data['result'] as $item) {
                $order = ($i - 3);

                $spreadsheet->setActiveSheetIndex(0)
                    ->setCellValue('A' . $i, $order)
                    ->setCellValue('B' . $i, $item->npk)
                    ->setCellValue('C' . $i, $item->nama_karyawan)
                    ->setCellValue('D' . $i, $item->cabang_spu)
                    ->setCellValue('E' . $i, $item->department)
                    ->setCellValue('F' . $i, $item->jabatan)
                    ->setCellValue('G' . $i, $item->kode_jabatan)
                    ->setCellValue('H' . $i, date('d F Y', strtotime($item->tanggal_training)))
                    ->setCellValue('I' . $i, $item->nama_penyelenggara)
                    ->setCellValue('J' . $i, $item->tema_training)
                    ->setCellValue('K' . $i, $item->alamat_lokasi_training)
                    ->setCellValue('L' . $i, $item->biaya_training);
                $i++;
            }

            // Mengatur Format Menjadi string
            $columnFormat = ['B'];

            foreach ($columnFormat as $format) {
                $spreadsheet->getActiveSheet()->getStyle($format)->getNumberFormat()
                    ->setFormatCode('@');
            }

            // Menambahkan border
            $lastRow = $spreadsheet->getActiveSheet()->getHighestRow();
            $spreadsheet->getActiveSheet()->getStyle('A3:L' . $lastRow)->getBorders()->getAllBorders()->setBorderStyle(\PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN);

            // Rename worksheet
            $spreadsheet->getActiveSheet()->setTitle('Kar' . date('d-m-Y H'));

            // Set active sheet index to the first sheet, so Excel opens this as the first sheet
            $spreadsheet->setActiveSheetIndex(0);

            // Redirect output to a client’s web browser (Xlsx)
            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header('Content-Disposition: attachment;filename="' . $data['filename'] . '.xlsx"');
            header('Cache-Control: max-age=0');
            // If you're serving to IE 9, then the following may be needed
            header('Cache-Control: max-age=1');

            // If you're serving to IE over SSL, then the following may be needed
            header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
            header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
            header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
            header('Pragma: public'); // HTTP/1.0

            $writer = IOFactory::createWriter($spreadsheet, 'Xlsx');
            $writer->save('php://output');
            exit;
        }
        -> Untuk Wrap Text Supayah Rapih
            $spreadsheet->setActiveSheetIndex(0)
                // ->setCellValue('A' . $i, ($item['id_kk'] ? 'ADJUSTMENT' : '-'))
                ->setCellValue('B' . $i, '-')
                ->setCellValue('C' . $i, $this->common_model->data('', 'flpp_m_indikator', ['indikator_id' => $item['in_parent_id']])->get()->row_array()['indikator_name'])
                ->setCellValue('D' . $i, ($item['no_parameter'] ?? '-'))
                ->setCellValue('E' . $i, ($item['indikator_name'] ?? '-'))
                ->setCellValue('F' . $i, (!empty($item['penyebab']) ? strip_tags($item['penyebab']) : '-'))->getStyle('F' . $i)->getAlignment()->setWrapText(true);
            $spreadsheet->setActiveSheetIndex(0)->setCellValue('G' . $i, (!empty($item['dampak']) ? strip_tags($item['dampak']) : '-'))->getStyle('G' . $i)->getAlignment()->setWrapText(true);
            $spreadsheet->setActiveSheetIndex(0)->setCellValue('H' . $i, (!empty($item['sistem_pengendalian']) ? strip_tags($item['sistem_pengendalian']) : '-'))->getStyle('H' . $i)->getAlignment()->setWrapText(true);
            $spreadsheet->setActiveSheetIndex(0)->setCellValue('I' . $i, ($item['rencana_aksi'] ?? '-'))
                ->setCellValue('J' . $i, ($item['adj_lvl_kemungkinan'] ?? ($item['lvl_kemungkinan'] ?? '-')))
                ->setCellValue('K' . $i, (!empty($item['adj_penjelasan_kemungkinan']) ? strip_tags($item['adj_penjelasan_kemungkinan']) : (!empty($item['penjelasan_kemungkinan']) ? strip_tags($item['penjelasan_kemungkinan']) : '-')))->getStyle('K' . $i)->getAlignment()->setWrapText(true);
            $spreadsheet->setActiveSheetIndex(0)->setCellValue('L' . $i, ($item['adj_lvl_dampak'] ?? ($item['lvl_dampak'] ?? '-')))
                ->setCellValue('M' . $i, (!empty($item['adj_penjelasan_dampak']) ? strip_tags($item['adj_penjelasan_dampak']) : (!empty($item['penjelasan_dampak']) ? strip_tags($item['penjelasan_dampak']) : '-')))->getStyle('M' . $i)->getAlignment()->setWrapText(true);
            $spreadsheet->setActiveSheetIndex(0)->setCellValue('N' . $i, ($item['adj_besaran_risiko'] ?? ($item['besaran_risiko'] ?? '-')))
                ->setCellValue('O' . $i, ($item['adj_prioritas_risiko'] ?? ($item['prioritas_risiko'] ?? '-')))
                ->setCellValue('P' . $i, ($item['adj_lvl_kemungkinan'] ?? ($item['lvl_kemungkinan'] ?? '-')))
                ->setCellValue('Q' . $i, ($item['adj_lvl_dampak'] ?? ($item['lvl_dampak'] ?? '-')))
                ->setCellValue('R' . $i, ($item['adj_lvl_risiko'] ?? ($item['lvl_risiko'] ?? '-')))
                ->setCellValue('S' . $i, ($item['keputusan_mitigasi'] ?? '-'))
                ->setCellValue('T' . $i, ($item['adj_nama'] ?? ($item['nama'] ?? '-')))
                ->setCellValue('U' . $i, ($item['adj_batasan_nilai'] ?? ($item['batasan_nilai'] ?? '-')))
                ->setCellValue('V' . $i, ($pic ?? '-'));
    => Read File Excel (Belum Sama Cek Tidak Ada Fienya)
        $this->load->model(array('mapping_model'));
        $this->lang->load('upload', 'indonesian');

        $config['upload_path'] = './uploads/LBU/';
        // $config['allowed_types'] = '*';
        $config['max_size'] = '5000';
        $config['file_name'] = 'file-' . date('Ymd');
        $config['overwrite'] = true;

        if (!is_dir($config['upload_path'])) {
            mkdir($config['upload_path'], 0777, TRUE);
        }

        $this->load->library('upload', $config);
        $this->upload->set_allowed_types('*');

        $file = $this->upload->data();
        $spreadsheet = IOFactory::load($file['full_path']);
        $sheet = $spreadsheet->getActiveSheet();

        // Baca data dari sel
        // $cellValue = $sheet->getCell('A1')->getValue();

        // $data = $this->excel_reader->sheets[0];
        $array_data = array();
        $status = 'ok';

        $firstRow = true;
        foreach ($sheet->getRowIterator() as $row) {
            if ($firstRow) {
                $firstRow = false;
                continue; // Lewati baris pertama (header)
            }

            $cellIterator = $row->getCellIterator();
            $cellIterator->setIterateOnlyExistingCells(FALSE);

            $row_data = array();
            foreach ($cellIterator as $cell) {
                $row_data[] = $cell->getValue();
            }

            if (!empty($row_data[0]) && !empty($row_data[2])) {
                $array_data[] = array(
                    'sandi' => $row_data[0],
                    'nama' => $row_data[1],
                    'nominal' => isset($row_data[2]) ? $row_data[2] : 0,
                    'bulan' => $row_data[3],
                    'tahun' => $row_data[4],
                );
            }
        }

        if ($status == 'ok') {
            if ($this->mapping_model->insert_xls_to_db($array_data)) {
                $message = array(TRUE, 'title' => 'Informasi!', 'msg' => 'Data indikator keuangan berhasil diimport!', 'url' => 'reload');
            }
        } else if ($status == 'null') {
            $message = array(FALSE, 'title' => 'Informasi!', 'msg' => 'File data yang diupload masih kosong', 'url' => '');
        }

==========================================================================================
+> Validation
    => Validation
        $this->form_validation->set_rules('besaran_risiko', 'besaran_risiko', 'required');

        if ($this->form_validation->run() == TRUE) {}
    => Validation Dinamis Password
        -> Controller
                $setting = $this->input->post('setting');

                foreach ($setting as $key => $value) {
                    if ($key == 'checkbox') {
                        foreach ($value as $key_title => $value_title) {
                            $get_data_label = $this->master_model->data('', $this->table_b_configurations, ['title' => $key_title])->get()->row_array()['label_options'];
                            $label_array = json_decode($get_data_label, true);

                            foreach ($label_array as $key_opt => $value_opt) {
                                if (array_key_exists($key_opt, $value_title)) {
                                    $value_title[$key_opt] = 1;
                                } else {
                                    $value_title[$key_opt] = 0;
                                }
                            }

                            // Hapus elemen array berdasarkan key
                            unset($value_title['check']);

                            $this->db->update($this->table_b_configurations, ['label_options' => json_encode($value_title)], ['title' => $key_title]);
                        }
                    } else {
                        $this->db->update($this->table_b_configurations, ['value' => $value], ['title' => $key]);
                    }
                }

                $message = array(TRUE, 'title' => 'Informasi', 'msg'   => 'Proses update data berhasil.!', 'url'   => site_url('setting'));

                echo json_encode($message);
        -> Filternya
            // ambil data config password
            $config_password = $this->master_model->data('', $this->table_b_configurations, ['title' => 'password'])->get()->row_array()['label_options'];

            // label di hardcode
            $capital = '';
            $angka = '';
            $symbol = '';

            $config_options = json_decode($config_password, true);

            if (!empty($config_options)) {
                foreach ($config_options as $key => $value) {
                    if ($key == 'capital' && $value) $capital = 'A-Z';
                    if ($key == 'angka' && $value) $angka = '\d';
                    if ($key == 'symbol' && $value) $symbol = '@$!%*?&';
                }
            }

            $regex = '/^';

            if (!empty($capital)) $regex .= '(?=.*[' . $capital . '])'; // Setidaknya satu huruf kapital
            if (!empty($angka)) $regex .= '(?=.*[' . $angka . '])'; // Setidaknya satu angka
            if (!empty($symbol)) $regex .= '(?=.*[' . $symbol . '])'; // Setidaknya satu karakter simbol jika symbol dipilih

            $regex .= '.{5,10}$/'; // Minimal 5 dan maksimal 10 karakter

            $this->form_validation->set_rules('password', 'Password', 'required|regex_match[' . $regex . ']');

            $this->form_validation->set_message('regex_match', 'Password harus memenuhi persyaratan: setidaknya ' . (!empty($capital) ? 'satu huruf kapital' : '') . (!empty($angka) ? ' satu angka' : '') . (!empty($symbol) ? ' satu karakter simbol' : '') . '.');
        -> View
            <?php foreach ($data['data'] as $key => $value) : ?>
                <?php if (($value['type'] != 'file') && ($value['type'] != 'hidden') && ($value['type'] != 'checkbox')) { ?>
                    <div class="row mb-3">
                        <div class="col-sm-2">
                            <label><?= ucwords(str_replace('_', ' ', $value['title'])); ?></label>
                        </div>
                        <div class="col-sm-10">
                            <input type="<?= $value['type']; ?>" class="form-control" name="setting[<?= $value['title']; ?>]" value="<?= $value['value']; ?>">
                        </div>
                    </div>
                <?php } else if ($value['type'] == 'checkbox') { ?>
                    <div class="row mb-3">
                        <div class="col-sm-2">
                            <label><?= ucwords(str_replace('_', ' ', $value['title'])); ?></label>
                        </div>
                        <div class="col-sm-10">
                            <?php foreach (json_decode($value['label_options'], true) as $key_label => $value_label) : ?>
                                <input type="checkbox" id="<?= $key_label; ?>" name="setting[checkbox][<?= $value['title']; ?>][<?= $key_label; ?>]" <?= ($value_label ? 'checked' : ''); ?>>
                                <label><?= ucwords(str_replace('_', ' ', $key_label)); ?></label>
                                <br>
                            <?php endforeach ?>
                            <input type="hidden" id="check" name="setting[checkbox][<?= $value['title']; ?>][check]" value="-">
                        </div>
                    </div>
                <?php } ?>
            <?php endforeach ?>
==========================================================================================
+> Class
    => Untuk table responsive
        table-responsive
    => Posisi Button
        flex float-left

==========================================================================================
+> PostgreSql
    => Untuk Menggabungkan isi menjadi 1 field
       (SELECT json_agg(json_build_object(sub_pic.id_kertas_kerja, sub_pic.pic))
            FROM (
                SELECT DISTINCT ON (aa.id_kertas_kerja, aa.pic) aa.id_kertas_kerja, aa.pic AS pic
                    FROM flpp_t_pic_kertas_kerja aa
                    WHERE b.id = aa.id_kertas_kerja
                ) sub_pic
        ) AS pic
        ->
            <td>
                <?php if (!empty($value['pic'])) {
                    $data_pic = json_decode($value['pic'], true);

                    if ($data_pic !== null) {
                        foreach ($data_pic as $item) {
                            foreach ($item as $ky => $val) { ?>
                                <div><?= $val; ?></div>
                <?php }
                        }
                    } else {
                        echo "Invalid JSON format";
                    }
                } ?>
            </td>
    => Untuk Menggabungkan isi menjadi 1 field V2
        (SELECT json_agg(json_build_object(sub_pic.id_kk, sub_pic.pic))
            FROM (
                SELECT DISTINCT ON (aa.id_kk, bb.nama) aa.id_kk, bb.nama || ' - ' || cc.nama_jabatan AS pic
                    FROM rba_t_kertaskerja aa
                    LEFT JOIN public.user bb ON aa.id_penanggungjawab = bb.id_user
                    LEFT JOIN m_jabatan cc ON bb.id_jabatan = cc.id
                    WHERE a.id = aa.id_auditable
                ) sub_pic
        ) AS pic,
        -> Menampilkannya 
            <?php if (!empty($value['pic'])) {
                $data_pic = json_decode($value['pic']);
                $tamp = [];

                foreach ($data_pic as $item) {
                    foreach ($item as $ky => $val) { ?>
                        <li><?= $val; ?></li>
            <?php }
                }
            } ?>

==========================================================================================
+> Backup Database
    => Install 
        composer require spatie/db-dumper
    => Contoh Code
        -> Backup
            _> Code
                ()> Controller
                    public function backup()
                    {
                        $dumpPath = '/backup/database/';
                        if (!is_dir($dumpPath)) {
                            mkdir($dumpPath, 0777, TRUE);
                        }

                        $filename = "Backup-" . date('Ymd_His') . ".sql";

                        Spatie\DbDumper\Databases\PostgreSql::create()
                            ->setDbName(FLPP_DB_NAME)
                            ->setUserName(FLPP_DB_USERNAME)
                            ->setPassword(FLPP_DB_PASSWORD)
                            ->setHost(FLPP_DB_HOSTNAME)
                            ->dumpToFile($dumpPath . $filename);

                        $this->housekeeping_model->insert_log('back up', array('nama_file' => $filename));

                        redirect('HouseKeeping');
                    }
                ()> Model
                    public function insert_log($act, $data = array())
                    {
                        $id = $this->session->userdata('user_id');

                        $data_actlog = array(
                            'user_id' => $id,
                            'activity' => $act,
                            'waktu' => date('Y-m-d H:i:s'),
                            'table_affected' => '-'
                        );

                        $data_hklog = array(
                            'user_id' => $id,
                            'activity' => $act,
                            'waktu' => date('Y-m-d H:i:s'),
                            'nama_file' => $data['nama_file'],
                            'status_file' => '1',
                        );

                        $this->db->insert($this->table_housekeeping_log, $data_hklog);
                        $this->db->insert($this->table_activity_log, $data_actlog);
                    }
        -> Clean 
            _> Code
                ()> Controller
                    public function clean()
                    {
                        // Cleaning the house
                        $this->housekeeping_model->bersihkan();

                        // INSERT LOG
                        $this->housekeeping_model->insert_log('cleaning database');
                        $this->session->set_flashdata('message', 'Data penilaian dan transaksional berhasil di bersihkan!');

                        redirect('HouseKeeping');
                    }
                ()> Model
                    public function bersihkan()
                    {
                        $trans_table = array(
                            'flpp_activity_log',
                            // table apa saja yang akan di hapus
                        );

                        $max = count($trans_table);
                        $j = 0;

                        foreach ($trans_table as $oo) {
                            if ($j + 1 < $max) {

                                $this->db->empty_table($trans_table[$j]);

                                $j++;
                            }
                        }
                    }

==========================================================================================
+> Email 
    => V1
        function sendMail($receiver = [], $subject = null, $message = null, $file = null)
        {
            $this->load->library('email');

            $config = array(
                'protocol' => 'smtp',
                'smtp_host' => 'ssl://smtp.gmail.com',
                'smtp_port' => 465,
                'smtp_user' => 'vionaindah11@gmail.com',
                'smtp_pass' => 'dbqqzqippznwdqmk',
                'mailtype' => 'html',
                'charset' => 'utf-8',
                'newline' => "\r\n"
            );

            $this->email->initialize($config);

            $this->email->from('vionaindah11@gmail.com', 'SOLMIT');
            $this->email->to($receiver);
            $this->email->subject($subject);
            $this->email->message($message);

            // Path to the file to be attached
            $file_path = FCPATH . $file;

            // Check if the file exists
            if (file_exists($file_path)) {
                $this->email->attach($file_path);
            } else {
                $hasil['status'] = false;
                $hasil['pesan']  = 'File Tidak di Temukan';
                $hasil['url']  = base_url('email/send');
            }

            if ($this->email->send()) {
                $hasil['status'] = true;
                $hasil['pesan']  = 'Data berhasil disimpan dan dikirim';
                $hasil['url']  = base_url('email/send');
            } else {
                $hasil['status'] = false;
                $hasil['pesan']  = 'Data gagal dikirim';
                $hasil['url']  = base_url('email/send');
                echo 'Error sending email: ' . $this->email->print_debugger();
            }

            $this->output->set_output(json_encode($hasil));
        }

==========================================================================================
+> ZIP
    => V1
        -> Controller
            function createZipFromLinks($links)
            {
                $directory = FCPATH . 'uploads/file_zip/';

                if (!is_dir($directory)) {
                    mkdir($directory, 0777, TRUE);
                    chmod($directory, 0777);
                }

                $zipFilename = 'Ceklis_Document.zip';
                $zipPath = $directory . $zipFilename;

                $zip = new ZipArchive();

                if ($zip->open($zipPath, ZipArchive::CREATE | ZipArchive::OVERWRITE) === TRUE) {
                    foreach ($links as $link) {
                        $filePath = FCPATH . 'uploads/register/' . $link;
                        if (is_readable($filePath)) {
                            $zip->addFile($filePath, basename($filePath));
                        } else {
                            echo 'Error: File not readable - ' . $filePath;
                        }
                    }

                    $zip->close();

                    return $zipFilename;
                } else {
                    $lastError = error_get_last();
                    echo json_encode(['error' => 'Failed to create the zip file. Error: ' . @$lastError['message']]);
                    exit;
                }
            }
        -> JS
            var selectedItems = [];

            function dAll(checkbox) {
                var itemId = checkbox.value;
                var keyId = checkbox.id;

                if (checkbox.checked) {
                    selectedItems[keyId] = itemId;
                } else {
                    if (selectedItems.hasOwnProperty(keyId)) {
                        delete selectedItems[keyId];
                    }
                }

                return selectedItems;
            }

            function checkIfAnyChecked() {
                if (Object.keys(selectedItems).length > 0) {
                    var checkboxes = document.querySelectorAll('.download-checkbox');

                    checkboxes.forEach(function(checkbox) {
                        dAll(checkbox);
                    });

                    console.log(Object.entries(selectedItems));

                    $.post("<?= base_url(); ?>/register/register/download", {
                            data: Object.entries(selectedItems),
                            id_auditable: <?= $id_auditable; ?>
                        },
                        function(data) {
                            try {
                                var responseData = JSON.parse(data);

                                if (responseData.fileUrl) {
                                    // Create a hidden anchor element to trigger the download
                                    var downloadLink = document.createElement('a');
                                    downloadLink.href = responseData.fileUrl;
                                    downloadLink.download = 'Ceklis_Document.zip';

                                    // Append the anchor element to the document
                                    document.body.appendChild(downloadLink);

                                    // Simulate a click event to trigger the download
                                    downloadLink.click();

                                    // Remove the anchor element from the document
                                    document.body.removeChild(downloadLink);
                                } else {
                                    console.log("File URL not available in the server response.");
                                }
                            } catch (error) {
                                console.error("Error parsing JSON response: ", error);
                            }
                        });
                } else {
                    console.log("Tidak ada checkbox yang dicentang.");
                }
            }
        -> HTML
            <button type="button" onclick="checkIfAnyChecked()" class="btn btn-info mb-3">Download</button>
            <input type="checkbox" class="download-checkbox" id="download_batch_` + result[a].id + `" name="batch[` + result[a].id + `]" onclick="dAll(this)" value="` + result[a].id + `">

==========================================================================================
+> CMD
    => Restore PostgreSQL
        -> Local
            psql -U postgres -d database -n schema < sso.sql
        -> Server
            psql -U postgres -h 192.168.100.217 -p 5432 -d maybankfinance_rba_prod20230911 -n public < maybankfinance_rba_backup20230911.sql
            psql -U postgres -d <nama_db> -n <nama_schema> < <nama_file>.sql
    => Dump PostgreSQL
        -> Local
            pg_restore -U postgres -d mydatabase backup_file.backup
        -> Server
            pg_dump -h 10.1.99.143 -U postgres -d maybankfinance_rba -n public -f maybankfinance_rba-backup20230803.sql
		- pg_dump -h 192.168.100.217 -U postgres -d tapera_simr_kickoff -n flpp -f C:/flpp.sql
    => Create Code Igniter 4
        composer create-project codeigniter4/appstarter aplikasi-belajar-ci4
    => Create File
        touch <nama_file>
    => Login MySQL
        mysqladmin -u mySQL -p mySQLServer51
    => Remote
        ssh solmit@app.solmit.com -p 2002
    => Clear cache laravel (Setiap merubah config atau .env)
        php artisan optimize
    => Buat Module (Harus di set dulu)
        php artisan make:module / make:model
    => Jika .GITIGNORE Tidak Berfungsi
        $ git rm -r --cached .
    => Restore MySQL
        -> Local
            cd C:\Program Files\MySQL\MySQL Server X.Y\bin (Masuk Dulu Ke directory MySQL)
            mysql -u root -h localhost dbtkb < C:\Users\mwand\Downloads\dbtkb.sql

==========================================================================================
+> CSS
    => Text Tengah / Center
        text-align: center;

==========================================================================================
+> Library
    => JS
        -> InputMask (untuk membuat angka di belakang coma menjadi rapih)
            > Inputan
                <input id="decimalInput" type="text" pattern="\d*" placeholder="0" name="..." value="...">
            > Script
                // Yang di pakai hanya 2
                <script src="<?= base_url(); ?>asset/inputmask.js"></script>
                <script src="<?= base_url(); ?>asset/inputmask.min.js"></script>
                <script>
                    Inputmask({
                        "alias": "numeric",
                        "radixPoint": ".",
                        "groupSeparator": ",",
                        "autoGroup": true,
                        "digits": 5 // dibelakang coma
                    }).mask("#decimalInput");
                </script>
            > Controller
                (!empty($angka) ? number_format($angka, 5) : null)
            -> Database
                Tipe Datanya Harus Decimal
                ALTER TABLE risk_t_posisi_risklimit
                ALTER COLUMN udiv_risk_tolerance TYPE DECIMAL;